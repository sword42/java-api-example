apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'


sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
	mavenCentral()
}

configurations {
	embeddedJetty
}

dependencies {
	providedCompile (
		'javax.servlet:servlet-api:3.0-alpha-1+',
		'org.mockito:mockito-all:1.9.5',
		'org.hamcrest:hamcrest-all:1.3',
		'org.springframework:spring-test:3.2.3.RELEASE',
		'org.springframework:spring-mock:2.0.8',
		'com.jayway.jsonpath:json-path:0.8.1',
		'com.jayway.jsonpath:json-path-assert:0.8.1',
		'junit:junit:4.11',
	)
	
	compile (
		'org.codehaus.jackson:jackson-mapper-asl:1.9.13',
		'org.springframework:spring-core:3.2.3.RELEASE',
		'org.springframework:spring-web:3.2.3.RELEASE',
		'org.springframework:spring-webmvc:3.2.3.RELEASE',
		'org.springframework:spring-tx:3.2.3.RELEASE',
		'org.slf4j:slf4j-api:1.7.5',
		'org.slf4j:jcl-over-slf4j:1.7.5',
		'ch.qos.logback:logback-classic:1.0.13',
	)
	
	embeddedJetty (
		'org.eclipse.jetty:jetty-server:+',
		'org.eclipse.jetty:jetty-servlet:+',
		'org.eclipse.jetty:jetty-webapp:+',
		'org.eclipse.jetty:jetty-jsp:+',
		'org.eclipse.jetty:jetty-annotations:+',
		'org.eclipse.jetty:jetty-io:+',
		'org.eclipse.jetty:jetty-util:+',
		'org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127',
	)
	

}
// Gets version from tag.
def readVersion() {
    def output = new ByteArrayOutputStream()
    def result = exec {
        commandLine = ['git', 'describe']
        standardOutput = output
        ignoreExitValue = true
    }
    def version = (result.getExitValue() == 0) ?
            output.toString().trim() : 'UNKNOWN'
    println "Version ${version}"
    return version
}

// Gets build number by counting commits to tag named 'build'.
def readBuildNumber() {
    def output = new ByteArrayOutputStream()
    def result = exec {
        commandLine = ['git', 'describe', '--always', '--long']
        standardOutput = output
        ignoreExitValue = true
    }
    def buildNumber = (result.getExitValue() == 0) ?
            output.toString().split('-')[1] : 'UNKNOWN'
    println "Build number ${buildNumber}"
    return buildNumber
}

def assignVersion() {
    ext.version = readVersion()
    ext.buildNumber = readBuildNumber()
    project.version = "${ext.version}.${ext.buildNumber}".toString()
	return project.version
}

def builtDateUTC() {
	TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
	def now = new Date()
	return now.format("MM/dd/yyyy'T'HH:mm:ss.SSS'Z'")
}

afterEvaluate { project ->
    assignVersion()
}



war {
	ext.buildDate = builtDateUTC()
	ext.buildVersion = assignVersion()
		
	baseName = 'java-api-example'
	// unzip and add all jetty dependencies into the root of our war file
	from {
		configurations.embeddedJetty.collect {
			it.isDirectory() ? it : project.zipTree(it)
		}
	}
	
	// remove signature and unnecessary files
	exclude "META-INF/*.SF", "META-INF/*.RSA", "about.html", "about_files/**", "readme.txt", "plugin.properties", "jetty-dir.css"

	// include in the root of the war only the classes which will be used to start the embedded Jetty
	from "$buildDir/classes/main"
	exclude "com/myapp/"
	
	// sets the main class to run when the generate war be executed using 'java -jar'
	manifest { 
		attributes (
			'Main-Class': 'io.github.sword42.javaapiexample.JettyStarter',			
            'Implementation-Title': 'Java API Example',	
            'Implementation-Version': ext.buildVersion,	
            'Implementation-Vendor': 'sword42.github.io',
			'Built-Date': ext.buildDate,
			'Built-JDK': System.getProperty('java.version'),
		) 
	}
}

// Once you will need some basic api (servlet api, for example) for compilation, you need to add embeddedJetty dependencies for compilation
sourceSets.main.compileClasspath += configurations.embeddedJetty
